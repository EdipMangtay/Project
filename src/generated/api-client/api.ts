/* tslint:disable */
/* eslint-disable */
/**
 * ARI API
 * ARI API Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccountControllerProfile200Response
 */
export interface AccountControllerProfile200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountControllerProfile200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountControllerProfile200Response
     */
    'message'?: string;
    /**
     * 
     * @type {AccountResponseDto}
     * @memberof AccountControllerProfile200Response
     */
    'payload'?: AccountResponseDto;
}
/**
 * 
 * @export
 * @interface AccountControllerUpdateProfile200Response
 */
export interface AccountControllerUpdateProfile200Response {
    /**
     * 
     * @type {number}
     * @memberof AccountControllerUpdateProfile200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountControllerUpdateProfile200Response
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof AccountControllerUpdateProfile200Response
     */
    'payload'?: object;
}
/**
 * 
 * @export
 * @interface AccountResponseDto
 */
export interface AccountResponseDto {
    /**
     * User id
     * @type {string}
     * @memberof AccountResponseDto
     */
    'id': string;
    /**
     * First name
     * @type {string}
     * @memberof AccountResponseDto
     */
    'firstName': string;
    /**
     * Last name
     * @type {string}
     * @memberof AccountResponseDto
     */
    'lastName': string;
    /**
     * Email
     * @type {string}
     * @memberof AccountResponseDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AccountUpdateRequestDto
 */
export interface AccountUpdateRequestDto {
    /**
     * The first name
     * @type {string}
     * @memberof AccountUpdateRequestDto
     */
    'firstName': string;
    /**
     * The last name
     * @type {string}
     * @memberof AccountUpdateRequestDto
     */
    'lastName': string;
    /**
     * The email
     * @type {string}
     * @memberof AccountUpdateRequestDto
     */
    'email': string;
    /**
     * The password
     * @type {string}
     * @memberof AccountUpdateRequestDto
     */
    'password'?: string;
    /**
     * The confirm password
     * @type {string}
     * @memberof AccountUpdateRequestDto
     */
    'confirmPassword'?: string;
}
/**
 * 
 * @export
 * @interface AuthControllerForgotPassword200Response
 */
export interface AuthControllerForgotPassword200Response {
    /**
     * 
     * @type {number}
     * @memberof AuthControllerForgotPassword200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthControllerForgotPassword200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AuthControllerLogin200Response
 */
export interface AuthControllerLogin200Response {
    /**
     * 
     * @type {number}
     * @memberof AuthControllerLogin200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthControllerLogin200Response
     */
    'message'?: string;
    /**
     * 
     * @type {LoginResponseDto}
     * @memberof AuthControllerLogin200Response
     */
    'payload'?: LoginResponseDto;
}
/**
 * 
 * @export
 * @interface DepartmentControllerCreateDepartment200Response
 */
export interface DepartmentControllerCreateDepartment200Response {
    /**
     * 
     * @type {number}
     * @memberof DepartmentControllerCreateDepartment200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof DepartmentControllerCreateDepartment200Response
     */
    'message'?: string;
    /**
     * 
     * @type {DepartmentDetailDto}
     * @memberof DepartmentControllerCreateDepartment200Response
     */
    'payload'?: DepartmentDetailDto;
}
/**
 * 
 * @export
 * @interface DepartmentControllerGetDepartments200Response
 */
export interface DepartmentControllerGetDepartments200Response {
    /**
     * 
     * @type {number}
     * @memberof DepartmentControllerGetDepartments200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof DepartmentControllerGetDepartments200Response
     */
    'message'?: string;
    /**
     * 
     * @type {DepartmentPaginateDto}
     * @memberof DepartmentControllerGetDepartments200Response
     */
    'payload'?: DepartmentPaginateDto;
}
/**
 * 
 * @export
 * @interface DepartmentCreateDto
 */
export interface DepartmentCreateDto {
    /**
     * 
     * @type {string}
     * @memberof DepartmentCreateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentCreateDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface DepartmentDetailDto
 */
export interface DepartmentDetailDto {
    /**
     * The id of the department
     * @type {string}
     * @memberof DepartmentDetailDto
     */
    'id': string;
    /**
     * The name of the department
     * @type {string}
     * @memberof DepartmentDetailDto
     */
    'name': string;
    /**
     * The manager of the department
     * @type {string}
     * @memberof DepartmentDetailDto
     */
    'manager': string;
    /**
     * The description of the department
     * @type {string}
     * @memberof DepartmentDetailDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface DepartmentListDto
 */
export interface DepartmentListDto {
    /**
     * The id of the department
     * @type {string}
     * @memberof DepartmentListDto
     */
    'id': string;
    /**
     * The name of the department
     * @type {string}
     * @memberof DepartmentListDto
     */
    'name': string;
    /**
     * The manager of the department
     * @type {string}
     * @memberof DepartmentListDto
     */
    'manager': string;
    /**
     * The users count of the department
     * @type {number}
     * @memberof DepartmentListDto
     */
    'usersCount': number;
}
/**
 * 
 * @export
 * @interface DepartmentPaginateDto
 */
export interface DepartmentPaginateDto {
    /**
     * 
     * @type {number}
     * @memberof DepartmentPaginateDto
     */
    'totalDocs': number;
    /**
     * 
     * @type {number}
     * @memberof DepartmentPaginateDto
     */
    'limit': number;
    /**
     * 
     * @type {boolean}
     * @memberof DepartmentPaginateDto
     */
    'hasPrevPage': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof DepartmentPaginateDto
     */
    'hasNextPage': boolean;
    /**
     * 
     * @type {number}
     * @memberof DepartmentPaginateDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof DepartmentPaginateDto
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof DepartmentPaginateDto
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof DepartmentPaginateDto
     */
    'prevPage': number;
    /**
     * 
     * @type {number}
     * @memberof DepartmentPaginateDto
     */
    'nextPage': number;
    /**
     * 
     * @type {number}
     * @memberof DepartmentPaginateDto
     */
    'pagingCounter': number;
    /**
     * 
     * @type {object}
     * @memberof DepartmentPaginateDto
     */
    'meta': object;
    /**
     * 
     * @type {Array<DepartmentListDto>}
     * @memberof DepartmentPaginateDto
     */
    'docs': Array<DepartmentListDto>;
}
/**
 * 
 * @export
 * @interface DepartmentUpdateDto
 */
export interface DepartmentUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof DepartmentUpdateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentUpdateDto
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ExceptionResponse
 */
export interface ExceptionResponse {
    /**
     * Status code
     * @type {number}
     * @memberof ExceptionResponse
     */
    'statusCode': ExceptionResponseStatusCodeEnum;
    /**
     * Error message
     * @type {string}
     * @memberof ExceptionResponse
     */
    'message': string;
    /**
     * Error details
     * @type {Array<string>}
     * @memberof ExceptionResponse
     */
    'errors': Array<string>;
}

export const ExceptionResponseStatusCodeEnum = {
    NUMBER_100: 100,
    NUMBER_101: 101,
    NUMBER_102: 102,
    NUMBER_103: 103,
    NUMBER_200: 200,
    NUMBER_201: 201,
    NUMBER_202: 202,
    NUMBER_203: 203,
    NUMBER_204: 204,
    NUMBER_205: 205,
    NUMBER_206: 206,
    NUMBER_300: 300,
    NUMBER_301: 301,
    NUMBER_302: 302,
    NUMBER_303: 303,
    NUMBER_304: 304,
    NUMBER_307: 307,
    NUMBER_308: 308,
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_402: 402,
    NUMBER_403: 403,
    NUMBER_404: 404,
    NUMBER_405: 405,
    NUMBER_406: 406,
    NUMBER_407: 407,
    NUMBER_408: 408,
    NUMBER_409: 409,
    NUMBER_410: 410,
    NUMBER_411: 411,
    NUMBER_412: 412,
    NUMBER_413: 413,
    NUMBER_414: 414,
    NUMBER_415: 415,
    NUMBER_416: 416,
    NUMBER_417: 417,
    NUMBER_418: 418,
    NUMBER_421: 421,
    NUMBER_422: 422,
    NUMBER_424: 424,
    NUMBER_428: 428,
    NUMBER_429: 429,
    NUMBER_500: 500,
    NUMBER_501: 501,
    NUMBER_502: 502,
    NUMBER_503: 503,
    NUMBER_504: 504,
    NUMBER_505: 505
} as const;

export type ExceptionResponseStatusCodeEnum = typeof ExceptionResponseStatusCodeEnum[keyof typeof ExceptionResponseStatusCodeEnum];

/**
 * 
 * @export
 * @interface ForgotPasswordRequestDto
 */
export interface ForgotPasswordRequestDto {
    /**
     * User email
     * @type {string}
     * @memberof ForgotPasswordRequestDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface LoginRequestDto
 */
export interface LoginRequestDto {
    /**
     * User email
     * @type {string}
     * @memberof LoginRequestDto
     */
    'email': string;
    /**
     * User password
     * @type {string}
     * @memberof LoginRequestDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponseDto
 */
export interface LoginResponseDto {
    /**
     * Access token
     * @type {string}
     * @memberof LoginResponseDto
     */
    'access_token': string;
    /**
     * First name
     * @type {string}
     * @memberof LoginResponseDto
     */
    'firstName': string;
    /**
     * Last name
     * @type {string}
     * @memberof LoginResponseDto
     */
    'lastName': string;
    /**
     * Email
     * @type {string}
     * @memberof LoginResponseDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface OrganizationControllerCreateOrganization201Response
 */
export interface OrganizationControllerCreateOrganization201Response {
    /**
     * 
     * @type {number}
     * @memberof OrganizationControllerCreateOrganization201Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationControllerCreateOrganization201Response
     */
    'message'?: string;
    /**
     * 
     * @type {OrganizationDetailDto}
     * @memberof OrganizationControllerCreateOrganization201Response
     */
    'payload'?: OrganizationDetailDto;
}
/**
 * 
 * @export
 * @interface OrganizationControllerGetOrganization200Response
 */
export interface OrganizationControllerGetOrganization200Response {
    /**
     * 
     * @type {number}
     * @memberof OrganizationControllerGetOrganization200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationControllerGetOrganization200Response
     */
    'message'?: string;
    /**
     * 
     * @type {OrganizationDetailDto}
     * @memberof OrganizationControllerGetOrganization200Response
     */
    'payload'?: OrganizationDetailDto;
}
/**
 * 
 * @export
 * @interface OrganizationControllerGetOrganizations200Response
 */
export interface OrganizationControllerGetOrganizations200Response {
    /**
     * 
     * @type {number}
     * @memberof OrganizationControllerGetOrganizations200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationControllerGetOrganizations200Response
     */
    'message'?: string;
    /**
     * 
     * @type {OrganizationPaginationDto}
     * @memberof OrganizationControllerGetOrganizations200Response
     */
    'payload'?: OrganizationPaginationDto;
}
/**
 * 
 * @export
 * @interface OrganizationControllerGetUsersByOrganizationId200Response
 */
export interface OrganizationControllerGetUsersByOrganizationId200Response {
    /**
     * 
     * @type {number}
     * @memberof OrganizationControllerGetUsersByOrganizationId200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationControllerGetUsersByOrganizationId200Response
     */
    'message'?: string;
    /**
     * 
     * @type {OrganizationUserPaginationDto}
     * @memberof OrganizationControllerGetUsersByOrganizationId200Response
     */
    'payload'?: OrganizationUserPaginationDto;
}
/**
 * 
 * @export
 * @interface OrganizationCreateDto
 */
export interface OrganizationCreateDto {
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'taxNumber': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'taxOffice': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'companyName': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'alternativePhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'website'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationCreateDto
     */
    'district': string;
}
/**
 * 
 * @export
 * @interface OrganizationDetailDto
 */
export interface OrganizationDetailDto {
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'taxNumber': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'taxOffice': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'companyName': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'alternativePhone': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'website': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationDetailDto
     */
    'district': string;
}
/**
 * 
 * @export
 * @interface OrganizationListDto
 */
export interface OrganizationListDto {
    /**
     * 
     * @type {string}
     * @memberof OrganizationListDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationListDto
     */
    'companyName': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationListDto
     */
    'admin': string;
    /**
     * 
     * @type {number}
     * @memberof OrganizationListDto
     */
    'departmentCount': number;
}
/**
 * 
 * @export
 * @interface OrganizationPaginationDto
 */
export interface OrganizationPaginationDto {
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginationDto
     */
    'totalDocs': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginationDto
     */
    'limit': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationPaginationDto
     */
    'hasPrevPage': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationPaginationDto
     */
    'hasNextPage': boolean;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginationDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginationDto
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginationDto
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginationDto
     */
    'prevPage': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginationDto
     */
    'nextPage': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationPaginationDto
     */
    'pagingCounter': number;
    /**
     * 
     * @type {object}
     * @memberof OrganizationPaginationDto
     */
    'meta': object;
    /**
     * 
     * @type {Array<OrganizationListDto>}
     * @memberof OrganizationPaginationDto
     */
    'docs': Array<OrganizationListDto>;
}
/**
 * 
 * @export
 * @interface OrganizationUpdateDto
 */
export interface OrganizationUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'taxNumber': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'taxOffice': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'companyName': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'alternativePhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'website'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUpdateDto
     */
    'district': string;
}
/**
 * 
 * @export
 * @interface OrganizationUserListDto
 */
export interface OrganizationUserListDto {
    /**
     * 
     * @type {string}
     * @memberof OrganizationUserListDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUserListDto
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUserListDto
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationUserListDto
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface OrganizationUserPaginationDto
 */
export interface OrganizationUserPaginationDto {
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserPaginationDto
     */
    'totalDocs': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserPaginationDto
     */
    'limit': number;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationUserPaginationDto
     */
    'hasPrevPage': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrganizationUserPaginationDto
     */
    'hasNextPage': boolean;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserPaginationDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserPaginationDto
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserPaginationDto
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserPaginationDto
     */
    'prevPage': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserPaginationDto
     */
    'nextPage': number;
    /**
     * 
     * @type {number}
     * @memberof OrganizationUserPaginationDto
     */
    'pagingCounter': number;
    /**
     * 
     * @type {object}
     * @memberof OrganizationUserPaginationDto
     */
    'meta': object;
    /**
     * 
     * @type {Array<OrganizationUserListDto>}
     * @memberof OrganizationUserPaginationDto
     */
    'docs': Array<OrganizationUserListDto>;
}
/**
 * 
 * @export
 * @interface RegisterRequestDto
 */
export interface RegisterRequestDto {
    /**
     * User first name
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'firstName': string;
    /**
     * User last name
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'lastName': string;
    /**
     * User email
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'email': string;
    /**
     * User password
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'password': string;
    /**
     * User phone number
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface ResetPasswordRequestDto
 */
export interface ResetPasswordRequestDto {
    /**
     * Reset password token
     * @type {string}
     * @memberof ResetPasswordRequestDto
     */
    'token': string;
    /**
     * New password
     * @type {string}
     * @memberof ResetPasswordRequestDto
     */
    'password': string;
    /**
     * Confirm password
     * @type {string}
     * @memberof ResetPasswordRequestDto
     */
    'confirmPassword': string;
}
/**
 * 
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * 
     * @type {number}
     * @memberof Response
     */
    'statusCode': number;
    /**
     * 
     * @type {string}
     * @memberof Response
     */
    'message': string;
    /**
     * 
     * @type {object}
     * @memberof Response
     */
    'payload': object;
}
/**
 * 
 * @export
 * @interface UserControllerCreateUser201Response
 */
export interface UserControllerCreateUser201Response {
    /**
     * 
     * @type {number}
     * @memberof UserControllerCreateUser201Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserControllerCreateUser201Response
     */
    'message'?: string;
    /**
     * 
     * @type {UserDetailDto}
     * @memberof UserControllerCreateUser201Response
     */
    'payload'?: UserDetailDto;
}
/**
 * 
 * @export
 * @interface UserControllerDeleteUser204Response
 */
export interface UserControllerDeleteUser204Response {
    /**
     * 
     * @type {number}
     * @memberof UserControllerDeleteUser204Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserControllerDeleteUser204Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface UserControllerGetUser200Response
 */
export interface UserControllerGetUser200Response {
    /**
     * 
     * @type {number}
     * @memberof UserControllerGetUser200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserControllerGetUser200Response
     */
    'message'?: string;
    /**
     * 
     * @type {UserPaginationDto}
     * @memberof UserControllerGetUser200Response
     */
    'payload'?: UserPaginationDto;
}
/**
 * 
 * @export
 * @interface UserControllerUpdateUser200Response
 */
export interface UserControllerUpdateUser200Response {
    /**
     * 
     * @type {number}
     * @memberof UserControllerUpdateUser200Response
     */
    'statusCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserControllerUpdateUser200Response
     */
    'message'?: string;
    /**
     * 
     * @type {UserDetailDto}
     * @memberof UserControllerUpdateUser200Response
     */
    'payload'?: UserDetailDto;
}
/**
 * 
 * @export
 * @interface UserCreateDto
 */
export interface UserCreateDto {
    /**
     * 
     * @type {string}
     * @memberof UserCreateDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface UserDetailDto
 */
export interface UserDetailDto {
    /**
     * 
     * @type {string}
     * @memberof UserDetailDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface UserListDto
 */
export interface UserListDto {
    /**
     * 
     * @type {string}
     * @memberof UserListDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserListDto
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof UserListDto
     */
    'department': string;
    /**
     * 
     * @type {string}
     * @memberof UserListDto
     */
    'departmentRole': string;
    /**
     * 
     * @type {string}
     * @memberof UserListDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserListDto
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface UserPaginationDto
 */
export interface UserPaginationDto {
    /**
     * 
     * @type {number}
     * @memberof UserPaginationDto
     */
    'totalDocs': number;
    /**
     * 
     * @type {number}
     * @memberof UserPaginationDto
     */
    'limit': number;
    /**
     * 
     * @type {boolean}
     * @memberof UserPaginationDto
     */
    'hasPrevPage': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserPaginationDto
     */
    'hasNextPage': boolean;
    /**
     * 
     * @type {number}
     * @memberof UserPaginationDto
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof UserPaginationDto
     */
    'totalPages': number;
    /**
     * 
     * @type {number}
     * @memberof UserPaginationDto
     */
    'offset': number;
    /**
     * 
     * @type {number}
     * @memberof UserPaginationDto
     */
    'prevPage': number;
    /**
     * 
     * @type {number}
     * @memberof UserPaginationDto
     */
    'nextPage': number;
    /**
     * 
     * @type {number}
     * @memberof UserPaginationDto
     */
    'pagingCounter': number;
    /**
     * 
     * @type {object}
     * @memberof UserPaginationDto
     */
    'meta': object;
    /**
     * 
     * @type {Array<UserListDto>}
     * @memberof UserPaginationDto
     */
    'docs': Array<UserListDto>;
}
/**
 * 
 * @export
 * @interface UserUpdateDto
 */
export interface UserUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDto
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateDto
     */
    'phone': string;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountUpdateRequestDto} accountUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerUpdateProfile: async (accountUpdateRequestDto: AccountUpdateRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountUpdateRequestDto' is not null or undefined
            assertParamExists('accountControllerUpdateProfile', 'accountUpdateRequestDto', accountUpdateRequestDto)
            const localVarPath = `/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountUpdateRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerProfile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountControllerProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AccountUpdateRequestDto} accountUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerUpdateProfile(accountUpdateRequestDto: AccountUpdateRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerUpdateProfile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerUpdateProfile(accountUpdateRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountControllerUpdateProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerProfile(options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerProfile200Response> {
            return localVarFp.accountControllerProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountUpdateRequestDto} accountUpdateRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerUpdateProfile(accountUpdateRequestDto: AccountUpdateRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<AccountControllerUpdateProfile200Response> {
            return localVarFp.accountControllerUpdateProfile(accountUpdateRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountControllerProfile(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountControllerProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountUpdateRequestDto} accountUpdateRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountControllerUpdateProfile(accountUpdateRequestDto: AccountUpdateRequestDto, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountControllerUpdateProfile(accountUpdateRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: async (forgotPasswordRequestDto: ForgotPasswordRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordRequestDto' is not null or undefined
            assertParamExists('authControllerForgotPassword', 'forgotPasswordRequestDto', forgotPasswordRequestDto)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginRequestDto: LoginRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequestDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginRequestDto', loginRequestDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (token: string, registerRequestDto: RegisterRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('authControllerRegister', 'token', token)
            // verify required parameter 'registerRequestDto' is not null or undefined
            assertParamExists('authControllerRegister', 'registerRequestDto', registerRequestDto)
            const localVarPath = `/auth/register/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordRequestDto} resetPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword: async (resetPasswordRequestDto: ResetPasswordRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordRequestDto' is not null or undefined
            assertParamExists('authControllerResetPassword', 'resetPasswordRequestDto', resetPasswordRequestDto)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerForgotPassword(forgotPasswordRequestDto: ForgotPasswordRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerForgotPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerForgotPassword(forgotPasswordRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerForgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginRequestDto: LoginRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} token 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(token: string, registerRequestDto: RegisterRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(token, registerRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ResetPasswordRequestDto} resetPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResetPassword(resetPasswordRequestDto: ResetPasswordRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerForgotPassword200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPassword(resetPasswordRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword(forgotPasswordRequestDto: ForgotPasswordRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerForgotPassword200Response> {
            return localVarFp.authControllerForgotPassword(forgotPasswordRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequestDto} loginRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginRequestDto: LoginRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerLogin200Response> {
            return localVarFp.authControllerLogin(loginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(token: string, registerRequestDto: RegisterRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerRegister(token, registerRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordRequestDto} resetPasswordRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword(resetPasswordRequestDto: ResetPasswordRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<AuthControllerForgotPassword200Response> {
            return localVarFp.authControllerResetPassword(resetPasswordRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {ForgotPasswordRequestDto} forgotPasswordRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerForgotPassword(forgotPasswordRequestDto: ForgotPasswordRequestDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerForgotPassword(forgotPasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequestDto} loginRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginRequestDto: LoginRequestDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} token 
     * @param {RegisterRequestDto} registerRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegister(token: string, registerRequestDto: RegisterRequestDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRegister(token, registerRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ResetPasswordRequestDto} resetPasswordRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerResetPassword(resetPasswordRequestDto: ResetPasswordRequestDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerResetPassword(resetPasswordRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DepartmentCreateDto} departmentCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerCreateDepartment: async (departmentCreateDto: DepartmentCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentCreateDto' is not null or undefined
            assertParamExists('departmentControllerCreateDepartment', 'departmentCreateDto', departmentCreateDto)
            const localVarPath = `/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerDeleteDepartment: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentControllerDeleteDepartment', 'id', id)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerGetDepartment: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentControllerGetDepartment', 'id', id)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerGetDepartments: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DepartmentUpdateDto} departmentUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerUpdateDepartment: async (id: string, departmentUpdateDto: DepartmentUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentControllerUpdateDepartment', 'id', id)
            // verify required parameter 'departmentUpdateDto' is not null or undefined
            assertParamExists('departmentControllerUpdateDepartment', 'departmentUpdateDto', departmentUpdateDto)
            const localVarPath = `/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DepartmentCreateDto} departmentCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentControllerCreateDepartment(departmentCreateDto: DepartmentCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentControllerCreateDepartment200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentControllerCreateDepartment(departmentCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.departmentControllerCreateDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentControllerDeleteDepartment(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserControllerDeleteUser204Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentControllerDeleteDepartment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.departmentControllerDeleteDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentControllerGetDepartment(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentControllerCreateDepartment200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentControllerGetDepartment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.departmentControllerGetDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentControllerGetDepartments(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentControllerGetDepartments200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentControllerGetDepartments(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.departmentControllerGetDepartments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {DepartmentUpdateDto} departmentUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentControllerUpdateDepartment(id: string, departmentUpdateDto: DepartmentUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentControllerCreateDepartment200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentControllerUpdateDepartment(id, departmentUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentsApi.departmentControllerUpdateDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * 
         * @param {DepartmentCreateDto} departmentCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerCreateDepartment(departmentCreateDto: DepartmentCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentControllerCreateDepartment200Response> {
            return localVarFp.departmentControllerCreateDepartment(departmentCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerDeleteDepartment(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UserControllerDeleteUser204Response> {
            return localVarFp.departmentControllerDeleteDepartment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerGetDepartment(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentControllerCreateDepartment200Response> {
            return localVarFp.departmentControllerGetDepartment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerGetDepartments(page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentControllerGetDepartments200Response> {
            return localVarFp.departmentControllerGetDepartments(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {DepartmentUpdateDto} departmentUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentControllerUpdateDepartment(id: string, departmentUpdateDto: DepartmentUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentControllerCreateDepartment200Response> {
            return localVarFp.departmentControllerUpdateDepartment(id, departmentUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DepartmentsApi - object-oriented interface
 * @export
 * @class DepartmentsApi
 * @extends {BaseAPI}
 */
export class DepartmentsApi extends BaseAPI {
    /**
     * 
     * @param {DepartmentCreateDto} departmentCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentControllerCreateDepartment(departmentCreateDto: DepartmentCreateDto, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentControllerCreateDepartment(departmentCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentControllerDeleteDepartment(id: string, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentControllerDeleteDepartment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentControllerGetDepartment(id: string, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentControllerGetDepartment(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentControllerGetDepartments(page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentControllerGetDepartments(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {DepartmentUpdateDto} departmentUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentControllerUpdateDepartment(id: string, departmentUpdateDto: DepartmentUpdateDto, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentControllerUpdateDepartment(id, departmentUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {OrganizationCreateDto} organizationCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerCreateOrganization: async (organizationCreateDto: OrganizationCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationCreateDto' is not null or undefined
            assertParamExists('organizationControllerCreateOrganization', 'organizationCreateDto', organizationCreateDto)
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerDeleteOrganization: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('organizationControllerDeleteOrganization', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerGetOrganization: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('organizationControllerGetOrganization', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerGetOrganizations: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerGetUsersByOrganizationId: async (id: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('organizationControllerGetUsersByOrganizationId', 'id', id)
            const localVarPath = `/organizations/{id}/users`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {OrganizationUpdateDto} organizationUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerUpdateOrganization: async (id: string, organizationUpdateDto: OrganizationUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('organizationControllerUpdateOrganization', 'id', id)
            // verify required parameter 'organizationUpdateDto' is not null or undefined
            assertParamExists('organizationControllerUpdateOrganization', 'organizationUpdateDto', organizationUpdateDto)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizationUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {OrganizationCreateDto} organizationCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationControllerCreateOrganization(organizationCreateDto: OrganizationCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationControllerCreateOrganization201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationControllerCreateOrganization(organizationCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.organizationControllerCreateOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationControllerDeleteOrganization(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserControllerDeleteUser204Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationControllerDeleteOrganization(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.organizationControllerDeleteOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationControllerGetOrganization(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationControllerGetOrganization200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationControllerGetOrganization(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.organizationControllerGetOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationControllerGetOrganizations(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationControllerGetOrganizations200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationControllerGetOrganizations(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.organizationControllerGetOrganizations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationControllerGetUsersByOrganizationId(id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationControllerGetUsersByOrganizationId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationControllerGetUsersByOrganizationId(id, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.organizationControllerGetUsersByOrganizationId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {OrganizationUpdateDto} organizationUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async organizationControllerUpdateOrganization(id: string, organizationUpdateDto: OrganizationUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationControllerGetOrganization200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.organizationControllerUpdateOrganization(id, organizationUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.organizationControllerUpdateOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * 
         * @param {OrganizationCreateDto} organizationCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerCreateOrganization(organizationCreateDto: OrganizationCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationControllerCreateOrganization201Response> {
            return localVarFp.organizationControllerCreateOrganization(organizationCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerDeleteOrganization(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UserControllerDeleteUser204Response> {
            return localVarFp.organizationControllerDeleteOrganization(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerGetOrganization(id: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationControllerGetOrganization200Response> {
            return localVarFp.organizationControllerGetOrganization(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerGetOrganizations(page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationControllerGetOrganizations200Response> {
            return localVarFp.organizationControllerGetOrganizations(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] Page number
         * @param {number} [limit] Number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerGetUsersByOrganizationId(id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationControllerGetUsersByOrganizationId200Response> {
            return localVarFp.organizationControllerGetUsersByOrganizationId(id, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {OrganizationUpdateDto} organizationUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        organizationControllerUpdateOrganization(id: string, organizationUpdateDto: OrganizationUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationControllerGetOrganization200Response> {
            return localVarFp.organizationControllerUpdateOrganization(id, organizationUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * 
     * @param {OrganizationCreateDto} organizationCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public organizationControllerCreateOrganization(organizationCreateDto: OrganizationCreateDto, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).organizationControllerCreateOrganization(organizationCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public organizationControllerDeleteOrganization(id: string, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).organizationControllerDeleteOrganization(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public organizationControllerGetOrganization(id: string, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).organizationControllerGetOrganization(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public organizationControllerGetOrganizations(page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).organizationControllerGetOrganizations(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {number} [page] Page number
     * @param {number} [limit] Number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public organizationControllerGetUsersByOrganizationId(id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).organizationControllerGetUsersByOrganizationId(id, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {OrganizationUpdateDto} organizationUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public organizationControllerUpdateOrganization(id: string, organizationUpdateDto: OrganizationUpdateDto, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).organizationControllerUpdateOrganization(id, organizationUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserCreateDto} userCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser: async (userCreateDto: UserCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateDto' is not null or undefined
            assertParamExists('userControllerCreateUser', 'userCreateDto', userCreateDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerDeleteUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerGetUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UserUpdateDto} userUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateUser: async (id: string, userUpdateDto: UserUpdateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerUpdateUser', 'id', id)
            // verify required parameter 'userUpdateDto' is not null or undefined
            assertParamExists('userControllerUpdateUser', 'userUpdateDto', userUpdateDto)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserCreateDto} userCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreateUser(userCreateDto: UserCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserControllerCreateUser201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreateUser(userCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerCreateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDeleteUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserControllerDeleteUser204Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDeleteUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerDeleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserControllerGetUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerGetUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UserUpdateDto} userUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateUser(id: string, userUpdateDto: UserUpdateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserControllerUpdateUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateUser(id, userUpdateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerUpdateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {UserCreateDto} userCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser(userCreateDto: UserCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<UserControllerCreateUser201Response> {
            return localVarFp.userControllerCreateUser(userCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteUser(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UserControllerDeleteUser204Response> {
            return localVarFp.userControllerDeleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUser(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UserControllerGetUser200Response> {
            return localVarFp.userControllerGetUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UserUpdateDto} userUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateUser(id: string, userUpdateDto: UserUpdateDto, options?: RawAxiosRequestConfig): AxiosPromise<UserControllerUpdateUser200Response> {
            return localVarFp.userControllerUpdateUser(id, userUpdateDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UserCreateDto} userCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerCreateUser(userCreateDto: UserCreateDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerCreateUser(userCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerDeleteUser(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerDeleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerGetUser(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerGetUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UserUpdateDto} userUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerUpdateUser(id: string, userUpdateDto: UserUpdateDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerUpdateUser(id, userUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }
}



